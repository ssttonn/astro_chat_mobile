# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'dotenv'

default_platform(:android)

before_all do |lane, options|
  # This block is called before each lane
  Dotenv.load('.env.secret')
end


platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  private_lane :send_slack_message do |options|
    version_name = options[:version_name]
    version_code = options[:version_code]

    slack(
      message: options[:message],
      success: true,
      payload: {  # Optional, lets you specify any number of your own Slack attachments.
        "Build Date" => Time.new.to_s,
        "Platform" => "Android",
        "Version" => version_name,
        "Build Number" => version_code
      },
      slack_url: ENV["SLACK_WEBHOOK_URL"]
    )
  end

  desc "Build the Android app and generate the APK, AAB"
  lane :build do |options|
    version_code = options[:version_code] || 1
    version_name = options[:version_name] || "1.0.0"

    build_type = options[:build_type] || "Release"

    android_set_version_code(
      version_code: version_code,
      gradle_file: "android/app/build.gradle"
    )

    android_set_version_name(
      version_name: version_name,
      gradle_file: "android/app/build.gradle"
    )

    # # Clean the app before building
    # gradle(
    #   task: "clean",
    #   project_dir: "android/",
    # )

    # Build the app
    build_android_app(
      task: "bundle assemble",
      build_type: build_type,
      print_command: false,
      project_dir: "android/",
      properties: build_type == "Release" ? {
        "android.injected.signing.store.file" => ENV["ANDROID_SIGNING_KEY_FILE"] || "#{Dir.pwd}/keys/astro_chat_key.keystore",
        "android.injected.signing.store.password" => ENV["ANDROID_SIGNING_KEY_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_SIGNING_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"]
      } : nil
    )
  end

  private_lane :upload do |options|
    upload_to_play_store(
      track: options[:track],
      release_status: options[:release_status],
      skip_upload_apk: true,
      json_key: ENV["GOOGLE_PLAY_JSON_FILE"] || "#{Dir.pwd}/keys/ac_secret.json",
      aab: "android/app/build/outputs/bundle/release/app-release.aab",
    )
  end

  desc "Deploy a new version to the Firebase App Distribution"
  lane :distribute do |options|
    version_name, version_code = get_version

    build(
      version_code: version_code,
      version_name: version_name
    )

    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"],
      firebase_cli_token: ENV["FIREBASE_APP_TOKEN"],
      release_notes: "Lots of amazing new features to test out!",
      android_artifact_type: "APK",
      groups: "astrotify-testers"
    )

    send_slack_message(
      message: "Successfully deployed a new version to the Firebase App Distribution",
      version_name: version_name,
      version_code: version_code
    )
  end
  
  desc "Deploy a new beta version to the Google Play"
  lane :beta do
    version_name, version_code = get_version

    build(
      version_code: version_code,
      version_name: version_name
    )

    upload(
      track: "beta",
      release_status: "draft"
    )

    send_slack_message(
      message: "Successfully deployed a new beta version to the Google Play",
      version_name: version_name,
      version_code: version_code
    )
  end

  desc "Deploy a new alpha version to the Google Play"
  lane :alpha do
    version_name, version_code = get_version

    build(
      version_code: version_code,
      version_name: version_name
    )

    upload(
      track: "alpha",
      release_status: "draft"
    )

    send_slack_message(
      message: "Successfully deployed a new alpha version to the Google Play",
      version_name: version_name,
      version_code: version_code
    )
  end

  desc "Deploy a new internal version to the Google Play"
  lane :internal do
    version_name, version_code = get_version

    build(
      version_code: version_code,
      version_name: version_name,
      build_type: "Release"
    )

    upload(
      track: "internal",
      release_status: "draft"
    )

    send_slack_message(
      message: "Successfully deployed a new internal version to the Google Play",
      version_name: version_name,
      version_code: version_code
    )
  end

  desc "Deploy a new version to the Google Play"
  lane :production do
    version_name, version_code = get_version

    build(
      version_code: version_code,
      version_name: version_name
    )

    upload(
      track: "production",
      release_status: "completed"
    )

    send_slack_message(
      message: "Successfully deployed a new production version to the Google Play",
      version_name: version_name,
      version_code: version_code
    )
  end

  desc "Distribute and deploy new version to the Firebase App Distribution and Google Play"
  lane :deploy do
    version_name, version_code = get_version

    build(
      version_code: version_code,
      version_name: version_name
    )

    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"],
      firebase_cli_token: ENV["FIREBASE_APP_TOKEN"],
      release_notes: "Lots of amazing new features to test out!",
      android_artifact_type: "APK",
      groups: "astrotify-testers"
    )

    upload(
      track: "internal",
      release_status: "draft"
    )

    send_slack_message(
      message: "Successfully deployed a new version to the Firebase App Distribution and Google Play",
      version_name: version_name,
      version_code: version_code
    )
  end

  def get_version
    # feature/1.0.0/feature_name
    # Extract the version name from the branch name
    branch_name = git_branch

    # Extract the version name from the branch name
    version_name = branch_name.split("/")[1]

    if version_name.nil? || !version_name.match?(/\d+\.\d+\.\d+/) 
      version_name = google_play_track_release_names(
        track: "internal",
        json_key: ENV["GOOGLE_PLAY_JSON_FILE"] || "#{Dir.pwd}/keys/ac_secret.json"
      )[0] || "1.0.0"
    end

    # Generate build number by timestamp
    version_code = Time.now.to_i

    return version_name, version_code
  end
end
